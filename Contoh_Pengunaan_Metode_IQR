{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/reynardofarreltj/reynardofarreltj/blob/main/Contoh_Pengunaan_Metode_IQR\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "OvsIjtb_hpP8"
      },
      "source": [
        "# Analisis dan Visualisasi Tingkat Kegemaran Membaca\n",
        "\n",
        "Notebook ini akan memandu Anda melalui proses analisis data tingkat kegemaran membaca, termasuk visualisasi data sebelum dan sesudah penghapusan outlier."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "k_V12wZ6hpP9"
      },
      "source": [
        "## Langkah 1: Persiapan dan Memuat Data\n",
        "\n",
        "Sebelum menjalankan kode di bawah, pastikan Anda telah mengunggah file `TGM 2020-2023_eng.csv` ke lingkungan Google Colab Anda.\n",
        "\n",
        "1. Klik ikon **folder** di sidebar kiri.\n",
        "2. Klik tombol **'Upload to session storage'**.\n",
        "3. Pilih file `TGM 2020-2023_eng.csv` dari komputer Anda."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 258
        },
        "id": "KnX7tneRhpP-",
        "outputId": "2bc50c69-1948-4ebb-9c4e-d6b1cd65174f"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Data setelah dibersihkan:\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "  Provinsi  Year Reading Frequency per week Number of Readings per Quarter  \\\n",
              "0     Aceh  2020                          4                              2   \n",
              "1     Aceh  2021                        5,5                            4,5   \n",
              "2     Aceh  2022                          5                            5,5   \n",
              "3     Aceh  2023                          5                            5,5   \n",
              "4     Bali  2020                          4                            2,5   \n",
              "\n",
              "  Daily Reading Duration (in minutes) Internet Access Frequency per Week  \\\n",
              "0                                  95                                NaN   \n",
              "1                                 103                                  5   \n",
              "2                                94,3                                5,5   \n",
              "3                                  95                                5,5   \n",
              "4                                  91                                NaN   \n",
              "\n",
              "  Daily Internet Duration (in minutes)  \\\n",
              "0                                  NaN   \n",
              "1                                 83,9   \n",
              "2                                123,4   \n",
              "3                                  104   \n",
              "4                                  NaN   \n",
              "\n",
              "   Tingkat Kegemaran Membaca (Reading Interest)  Category  \n",
              "0                                         54.68  Moderate  \n",
              "1                                         64.13      High  \n",
              "2                                         65.85      High  \n",
              "3                                         66.64  Moderate  \n",
              "4                                         56.98  Moderate  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-48cf8360-fa1d-4eb1-ad3d-5b1f252db28b\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Provinsi</th>\n",
              "      <th>Year</th>\n",
              "      <th>Reading Frequency per week</th>\n",
              "      <th>Number of Readings per Quarter</th>\n",
              "      <th>Daily Reading Duration (in minutes)</th>\n",
              "      <th>Internet Access Frequency per Week</th>\n",
              "      <th>Daily Internet Duration (in minutes)</th>\n",
              "      <th>Tingkat Kegemaran Membaca (Reading Interest)</th>\n",
              "      <th>Category</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Aceh</td>\n",
              "      <td>2020</td>\n",
              "      <td>4</td>\n",
              "      <td>2</td>\n",
              "      <td>95</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>54.68</td>\n",
              "      <td>Moderate</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Aceh</td>\n",
              "      <td>2021</td>\n",
              "      <td>5,5</td>\n",
              "      <td>4,5</td>\n",
              "      <td>103</td>\n",
              "      <td>5</td>\n",
              "      <td>83,9</td>\n",
              "      <td>64.13</td>\n",
              "      <td>High</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Aceh</td>\n",
              "      <td>2022</td>\n",
              "      <td>5</td>\n",
              "      <td>5,5</td>\n",
              "      <td>94,3</td>\n",
              "      <td>5,5</td>\n",
              "      <td>123,4</td>\n",
              "      <td>65.85</td>\n",
              "      <td>High</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Aceh</td>\n",
              "      <td>2023</td>\n",
              "      <td>5</td>\n",
              "      <td>5,5</td>\n",
              "      <td>95</td>\n",
              "      <td>5,5</td>\n",
              "      <td>104</td>\n",
              "      <td>66.64</td>\n",
              "      <td>Moderate</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Bali</td>\n",
              "      <td>2020</td>\n",
              "      <td>4</td>\n",
              "      <td>2,5</td>\n",
              "      <td>91</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>56.98</td>\n",
              "      <td>Moderate</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-48cf8360-fa1d-4eb1-ad3d-5b1f252db28b')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-48cf8360-fa1d-4eb1-ad3d-5b1f252db28b button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-48cf8360-fa1d-4eb1-ad3d-5b1f252db28b');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-c2aef74d-213e-4eea-a5c0-aa3b0b05982d\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c2aef74d-213e-4eea-a5c0-aa3b0b05982d')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-c2aef74d-213e-4eea-a5c0-aa3b0b05982d button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 140,\n  \"fields\": [\n    {\n      \"column\": \"Provinsi\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 35,\n        \"samples\": [\n          \"South Sulawesi\",\n          \"Jakarta\",\n          \"South East Sulawesi\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 2020,\n        \"max\": 2023,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          2021,\n          2023,\n          2020\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Reading Frequency per week\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 7,\n        \"samples\": [\n          \"4\",\n          \"5,5\",\n          \"3\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Number of Readings per Quarter\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 11,\n        \"samples\": [\n          \"5\",\n          \"2\",\n          \"3\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Daily Reading Duration (in minutes)\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 91,\n        \"samples\": [\n          \"94\",\n          \"96,6\",\n          \"88,4\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Internet Access Frequency per Week\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 7,\n        \"samples\": [\n          \"5\",\n          \"5,5\",\n          \"4\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Daily Internet Duration (in minutes)\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 84,\n        \"samples\": [\n          \"112\",\n          \"83,9\",\n          \"115\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Tingkat Kegemaran Membaca (Reading Interest)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6.286483536270379,\n        \"min\": 36.01,\n        \"max\": 73.27,\n        \"num_unique_values\": 139,\n        \"samples\": [\n          65.73,\n          56.88,\n          61.28\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Category\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"High\",\n          \"Moderate\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 1
        }
      ],
      "source": [
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "\n",
        "# Nama file yang diunggah\n",
        "file_name = 'TGM 2020-2023_eng.csv'\n",
        "\n",
        "# Membaca dataset dengan separator ';'\n",
        "df = pd.read_csv(file_name, delimiter=';')\n",
        "\n",
        "# Membersihkan kolom target: mengganti koma (,) dengan titik (.) dan mengubah tipe data menjadi float\n",
        "df['Tingkat Kegemaran Membaca (Reading Interest)'] = df['Tingkat Kegemaran Membaca (Reading Interest)'].str.replace(',', '.').astype(float)\n",
        "\n",
        "# Menampilkan 5 baris pertama untuk verifikasi\n",
        "print(\"Data setelah dibersihkan:\")\n",
        "df.head()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "d7glUNTHhpP_"
      },
      "source": [
        "## Langkah 2: Histogram Sebelum Penghapusan Outlier\n",
        "\n",
        "Sekarang, kita akan membuat histogram pertama untuk melihat distribusi awal dari data tingkat kegemaran membaca."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 564
        },
        "id": "hli6tpfehpP_",
        "outputId": "f5c00b42-d0ca-4434-ae9d-8844b3e9c450"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "plt.figure(figsize=(10, 6))\n",
        "plt.hist(df['Tingkat Kegemaran Membaca (Reading Interest)'], bins=15, color='blue', edgecolor='black')\n",
        "plt.title('Histogram Sebelum Penghapusan Outlier')\n",
        "plt.xlabel('Tingkat Kegemaran Membaca')\n",
        "plt.ylabel('Frekuensi')\n",
        "plt.grid(axis='y', alpha=0.75)\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "F5r-JqnGhpP_"
      },
      "source": [
        "## Langkah 3: Deteksi dan Penghapusan Outlier\n",
        "\n",
        "Kita akan menggunakan metode Interquartile Range (IQR) untuk mengidentifikasi nilai-nilai ekstrem (outlier) dalam data. Outlier adalah data yang berada di luar rentang `Q1 - 1.5*IQR` dan `Q3 + 1.5*IQR`."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mU7zgYmYhpQA",
        "outputId": "a20f138f-0017-4025-e518-8c5e5afcdce5"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Batas Bawah (Lower Bound): 42.37\n",
            "Batas Atas (Upper Bound): 79.77\n",
            "\n",
            "Jumlah baris data asli: 140\n",
            "Jumlah baris data setelah outlier dihapus: 139\n",
            "Jumlah outlier yang dihapus: 1\n"
          ]
        }
      ],
      "source": [
        "# Menghitung Q1, Q3, dan IQR\n",
        "Q1 = df['Tingkat Kegemaran Membaca (Reading Interest)'].quantile(0.25)\n",
        "Q3 = df['Tingkat Kegemaran Membaca (Reading Interest)'].quantile(0.75)\n",
        "IQR = Q3 - Q1\n",
        "\n",
        "# Menentukan batas bawah dan batas atas\n",
        "lower_bound = Q1 - 1.5 * IQR\n",
        "upper_bound = Q3 + 1.5 * IQR\n",
        "\n",
        "print(f\"Batas Bawah (Lower Bound): {lower_bound:.2f}\")\n",
        "print(f\"Batas Atas (Upper Bound): {upper_bound:.2f}\")\n",
        "\n",
        "# Membuat dataframe baru tanpa outlier\n",
        "df_no_outliers = df[(df['Tingkat Kegemaran Membaca (Reading Interest)'] >= lower_bound) & (df['Tingkat Kegemaran Membaca (Reading Interest)'] <= upper_bound)]\n",
        "\n",
        "# Menampilkan jumlah outlier yang dihapus\n",
        "print(f\"\\nJumlah baris data asli: {len(df)}\")\n",
        "print(f\"Jumlah baris data setelah outlier dihapus: {len(df_no_outliers)}\")\n",
        "print(f\"Jumlah outlier yang dihapus: {len(df) - len(df_no_outliers)}\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "M1TC9CjahpQA"
      },
      "source": [
        "## Langkah 4: Histogram Sesudah Penghapusan Outlier\n",
        "\n",
        "Terakhir, kita membuat histogram dari data yang telah bersih dari outlier untuk melihat distribusi yang lebih representatif."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 564
        },
        "id": "rPunUD86hpQA",
        "outputId": "95c72fe3-57a6-48b9-8549-c211e1d2f9cd"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "plt.figure(figsize=(10, 6))\n",
        "plt.hist(df_no_outliers['Tingkat Kegemaran Membaca (Reading Interest)'], bins=15, color='green', edgecolor='black')\n",
        "plt.title('Histogram Sesudah Penghapusan Outlier')\n",
        "plt.xlabel('Tingkat Kegemaran Membaca')\n",
        "plt.ylabel('Frekuensi')\n",
        "plt.grid(axis='y', alpha=0.75)\n",
        "plt.show()"
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.11.6"
    },
    "colab": {
      "provenance": [],
      "include_colab_link": true
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}